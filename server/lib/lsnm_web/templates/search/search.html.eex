<div id="search">
  {{ message }}
  <h1>Currently displaying <%= length(@results)%> open place(s) near you</h1>
  <div class="test"></div>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-7 col-12">
        <div class="loading" v-show="loading">
          <i class="fa fa-cog fa-spin fa-3x fa-fw"></i>
          <span class="sr-only">Loading...</span>
        </div>
        <div id="map"></div>
      </div>
      <div class="col-md-5 col-12">
        <div class="restaurant-cards-list">
        <%= for {result, index} <- Enum.with_index(@results) do %>
          <div class="card">
            <div class="card-body">
              <h4 class="card-title"><%= index + 1 %>: <%= result["name"] %></h4>
              <h6 class="card-subtitle mb-2 text-muted"><%= result["vicinity"]%></h6>
              <p class="card-text">
                <span class="badge badge-pill badge-warning">Rating: <%= result["rating"] %><i class="fa fa-star" aria-hidden="true"></i></span>
                <span class="badge badge-pill badge-success">Price Level: <%= result["price_level"] || "Unknown" %></span>
                <div class="button-group">
                  <div class="btn btn-outline-primary card-link" targer="_blank"><i class="fa fa-map-marker" aria-hidden="true"></i> Directions</div>
                  <div class="btn btn-outline-info card-link"><i class="fa fa-info-circle" aria-hidden="true"></i> Info</div>
                </div>
              </p>
            </div>
          </div>
        <% end %>
        </div>
        <button type="button" class="btn btn-primary btn-block show-more-btn">Show More</button>
      </div>
    </div>
  </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDjQ8EaxN_kXUvdx0BHh055I1FeL18urPQ"></script>
<script>
var app = new Vue({
  el: '#search',
  data: {
    message: 'Hello Vue!',
    map: null,
    loading: false,
    restaurants: null,
    radius: "<%= @conn.params["search"]["radius"] %>",
    keyword: "<%= @conn.params["search"]["keyword"] %>",
    geocoords: {
      lat: null,
      lng: null
    },
  },
  methods: {
    feedMe () {
      this.loading = true
      this.restaurants = null
      // const geocoder = new google.maps.Geocoder()
      // geocoder.geocode({ 'address': this.$route.query.location }, (results, status) => {
      navigator.geolocation.getCurrentPosition((position) => {
        const myGeocoords = { lat: position.coords.latitude, lng: position.coords.longitude }
        // this.geocoords.lat = results[0].geometry.location.lat()
        this.geocoords.lat = position.coords.latitude
        // this.geocoords.lng = results[0].geometry.location.lng()
        this.geocoords.lng = position.coords.longitude

        let map = new google.maps.Map(document.getElementById('map'), {
          center: myGeocoords,
          zoom: 13})

        // This map marker is different because we pass our lat/lng into it
        // instead of fetching it from the results
        // eslint-disable-next-line no-unused-vars
        const myLocationMarker = new google.maps.Marker({
          position: myGeocoords,
          animation: google.maps.Animation.DROP,
          icon: 'https://maps.google.com/mapfiles/ms/icons/yellow-dot.png',
          map: map
        })
        this.map = map
        Vue.http.get('/api/results', {params: {location: myGeocoords, keyword: this.keyword, radius: this.radius}})
          .then(response => {
            this.loading = false
            console.log(response.body.data.results)
            this.restaurants = response.body.data.results
            this.parsePlaces(this.restaurants)
        })
        // let service = new google.maps.places.PlacesService(map)
      //   service.nearbySearch({
      //     location: { lat: position.coords.latitude, lng: position.coords.longitude },
      //     radius: this.$route.query.radius * 1509,
      //     type: ['restaurant'],
      //     openNow: true,
      //     keyword: this.$route.query.keywords
      //   }, this.parsePlaces)
      // })
      })
    },
    createMarker (place, index) {
      let marker = new google.maps.Marker({
        map: this.map,
        animation: google.maps.Animation.DROP,
        label: `${index + 1}`, // add 1 to make them user friendly numbers
        position: place.geometry.location
      })
    },
    parsePlaces (places, status, pagination) {
      this.loading = false
      this.restaurants = (this.restaurants === null) ? places : this.restaurants.concat(places)
      // this.pagination = pagination
      // Draw the markers for the places
      places.forEach((place, index) => {
        this.createMarker(place, index)
      })
    },
  },
  mounted() {
    this.feedMe()
  }
})
</script>